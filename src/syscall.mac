%include "common.mac"
%include "registers.mac"

%ifndef SYSCALL_MAC
%define SYSCALL_MAC

%define SYSCALL_READ 0
%define SYSCALL_WRITE 1
%define SYSCALL_OPEN 2
%define SYSCALL_CLOSE 3
%define SYSCALL_POLL 7
%define SYSCALL_RT_SIGACTION 13
%define SYSCALL_RT_SIGRETURN 15
%define SYSCALL_IOCTL 16
%define SYSCALL_NANOSLEEP 35
%define SYSCALL_EXIT 60

;; rax - syscall num + ret
;; rdi, rsi, rdx, r10, r8, r9 - args
;; rcx, r11 - clobbered!

%define is_syscall_num(x) is_register_a(x)
%define is_syscall_argument(x) is_register_di(x) || is_register_si(x) || is_register_d(x) || is_register_10(x) || is_register_8(x) || is_register_9(x)
%define is_syscall_return(x) is_register_a(x)
%define is_syscall_clobbered(x) is_register_c(x) || is_register_11(x)

%macro _check_param_syscall_safe 1
	;; TODO: this can be smarter by using similar logic as in `is_syscall_ordered_arg`
	%ifndef CHECKED
		%if is_syscall_num(%1)
			%warning this parameter will be used as the syscall number, this will be overriden first of all, it is fine to use only for that purpose: %1
		%endif
		%if is_syscall_argument(%1)
			%warning this parameter might be used as a syscall argument, this is fine if it is copied over before being overwritten, but be careful: %1
		%endif
		%if is_syscall_return(%1)
			%warning this parameter will be overwritten by syscall return: %1
		%endif
		%if is_syscall_clobbered(%1)
			%warning this parameter will be clobbered by the syscall, it might be fine, but you most likely do not want that to happen: %1
		%endif
	%else
		%undef CHECKED
	%endif
%endmacro
%define check_param_syscall_safe(x) _check_param_syscall_safe x

%macro syscall_clobber_warning 0
	%warning make sure rcx and r11 are NOT used, because they will be clobbered by the syscall
%endmacro

%define is_syscall_ordered_arg(y, x) (y >= 0 && is_register_a(x)) || (y >= 1 && is_register_di(x)) || (y >= 2 && is_register_si(x)) || (y >= 3 && is_register_d(x)) || (y >= 4 && is_register_10(x)) || (y >= 5 && is_register_8(x)) || (y >= 6 && is_register_9(x))

%macro unsafe_system_call 1-*
	%ifndef CHECKED
		syscall_clobber_warning
	%else
		%undef CHECKED
	%endif
	mov rax, %1

	%if %0 >= 2
		%if %istoken(%2)
			%if is_syscall_ordered_arg(0, %2)
				%error this parameter will be overriden before use: %2
			%endif
		%endif
		mov rdi, %2
	%endif
	%if %0 >= 3
		%if %istoken(%3)
			%if is_syscall_ordered_arg(1, %3)
				%error this parameter will be overriden before use: %3
			%endif
		%endif
		mov rsi, %3
	%endif
	%if %0 >= 4
		%if %istoken(%4)
			%if is_syscall_ordered_arg(2, %4)
				%error this parameter will be overriden before use: %4
			%endif
		%endif
		mov rdx, %4
	%endif
	%if %0 >= 5
		%if %istoken(%5)
			%if is_syscall_ordered_arg(3, %5)
				%error this parameter will be overriden before use: %5
			%endif
		%endif
		mov r10, %5
	%endif
	%if %0 >= 6
		%if %istoken(%6)
			%if is_syscall_ordered_arg(4, %6)
				%error this parameter will be overriden before use: %6
			%endif
		%endif
		mov r8, %6
	%endif
	%if %0 >= 7
		%if %istoken(%7)
			%if is_syscall_ordered_arg(6, %7)
				%error this parameter will be overriden before use: %7
			%endif
		%endif
		mov r9, %7
	%endif

	syscall
%endmacro

%macro preserve_system_call 0
	preserve rcx
	preserve r11
%endmacro

%macro restore_system_call 0
	restore r11
	restore rcx
%endmacro

%macro safe_system_call 1-*
	preserve_system_call

	%define CHECKED
	system_call %{1:-1}

	restore_system_call
%endmacro

%macro checked_system_call 1-*
	%define CHECKED
	unsafe_system_call %{1:-1}
%endmacro

%macro checked 0-*
	%define CHECKED
	%if %0 != 0
		%{1:-1}
	%endif
%endmacro

%macro system_call 1-*
	%ifdef SAFE
		safe_system_call %{1:-1}
		%undef SAFE
	%else
		unsafe_system_call %{1:-1}
	%endif
%endmacro

%endif
